tasks.register("findOutdatedDependencies") {
    group = 'help'
    description = 'Displays latest versions of all dependencies in build.gradle.  ' +
            'Add flag `-Pforce` to automatically update build.gradle with the latest versions.'

    doLast {
        def mavenBaseURL = 'https://mvnrepository.com/artifact'
        def shouldUpdateBuildFile = project.hasProperty("force")
        def buildFile = new File(projectDir, "build.gradle")
        def buildFileText = buildFile.getText()

        // Parse out the dependencies { ... } block
        def dependencyBlockIndex = buildFileText.indexOf("dependencies {")
        def dependencyBlock = buildFileText.substring(
                dependencyBlockIndex,
                buildFileText.indexOf("\n}", dependencyBlockIndex)
        )
        def formattedDependencyBlock = dependencyBlock.replace("dependencies {", "")
                .replace("(", " ")
                .replace(")", " ")
                .stripIndent()
                .trim()

        println "Latest dependency versions:"
        println "-" * 27 + "\n"

        formattedDependencyBlock.eachLine {
            // Look for a dependency on the line
            def matcher = (it =~ /([\w]*) ('.*')/)
            if (!matcher) {
                matcher = (it =~ /([\w]*) (".*")/)
                if (!matcher) return
            }

            // Parse out the dependency in the following format (both single & double quotes work):
            // <depConfiguration> '<depOrg>:<depName>:<depVersion>'
            // (e.g. compile 'org.codehaus.groovy:groovy-all:2.5.7')
            String[] depParts = matcher[0][2].toString().replace("'", '').replace('"', '').split(':')
            String depOrg = depParts[0],
                   depName = depParts[1],
                   depVersion = depParts[2],
                   depConfiguration = matcher[0][1]

            // Fetch the latest version from maven repo
            def depURL = "$mavenBaseURL/$depOrg/$depName".toURL()
            def latestVersion
            depURL.readLines()
                    .findAll { it.contains("vbtn release") }
                    .first()
                    .eachMatch("href=\"$depName/(.*)\" class=\"vbtn release\"") {
                        latestVersion = it[0].split(' ')[0].split('/')[1].replace('"', '')
                    }

            // Already on latest version so skip this dependency
            if (latestVersion == depVersion) return

            // Update our version of the contents of the build.gradle file
            if (shouldUpdateBuildFile) {
                buildFileText = buildFileText.replace(
                        "$depOrg:$depName:$depVersion",
                        "$depOrg:$depName:$latestVersion"
                )
            }

            println "$depConfiguration '$depOrg:$depName:$latestVersion'\n"
        }

        // Write the new contents of the build.gradle to disk if -Pforce is present
        if (shouldUpdateBuildFile && buildFile.text != buildFileText) {
            buildFile.text = buildFileText
            println "build.gradle dependencies updated."
        }
    }
}